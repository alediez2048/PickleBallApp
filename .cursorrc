{
  "expertise": {
    "domains": ["TypeScript", "React Native", "Expo", "Mobile UI"],
    "level": "expert"
  },

  "codeStyle": {
    "general": {
      "paradigm": "functional",
      "pattern": "declarative",
      "avoidClasses": true,
      "preferIteration": true,
      "variableNaming": "descriptive with auxiliary verbs"
    },
    "fileStructure": [
      "exported component",
      "subcomponents",
      "helpers",
      "static content",
      "types"
    ]
  },

  "namingConventions": {
    "directories": "lowercase-with-dashes",
    "exports": "named exports preferred"
  },

  "typescript": {
    "preferences": {
      "interfaces": "preferred over types",
      "enums": "avoid, use maps instead",
      "components": "functional with interfaces",
      "mode": "strict"
    }
  },

  "syntax": {
    "functions": "use function keyword for pure functions",
    "conditionals": "avoid unnecessary curly braces",
    "jsx": "declarative",
    "formatting": "prettier"
  },

  "ui": {
    "components": "use Expo built-ins",
    "responsiveness": {
      "layout": "Flexbox",
      "dimensions": "useWindowDimensions"
    },
    "styling": ["styled-components", "Tailwind CSS"],
    "themes": "support dark mode with useColorScheme",
    "accessibility": {
      "standards": "high",
      "requirements": ["ARIA roles", "native accessibility props"]
    },
    "animations": {
      "libraries": [
        "react-native-reanimated",
        "react-native-gesture-handler"
      ]
    }
  },

  "safeArea": {
    "provider": "react-native-safe-area-context",
    "components": {
      "wrapper": "SafeAreaView",
      "scroll": "SafeAreaScrollView"
    },
    "rules": [
      "manage safe areas globally",
      "avoid hardcoded padding/margins",
      "respect safe area boundaries"
    ]
  },

  "performance": {
    "stateManagement": {
      "prefer": ["context", "reducers"],
      "minimize": ["useState", "useEffect"]
    },
    "startup": {
      "use": ["AppLoading", "SplashScreen"]
    },
    "images": {
      "format": "WebP where supported",
      "loading": "lazy with expo-image"
    },
    "optimization": {
      "codeSplitting": true,
      "lazyLoading": true,
      "memoization": {
        "components": true,
        "hooks": ["useMemo", "useCallback"]
      }
    }
  },

  "navigation": {
    "library": "react-navigation",
    "features": [
      "deep linking",
      "universal links",
      "dynamic routes with expo-router"
    ]
  },

  "stateManagement": {
    "global": {
      "primary": ["React Context", "useReducer"],
      "complex": ["Zustand", "Redux Toolkit"]
    },
    "data": {
      "fetching": "react-query",
      "urlParams": "expo-linking"
    }
  },

  "errorHandling": {
    "validation": "Zod",
    "logging": {
      "development": "console with descriptive messages",
      "production": ["Sentry", "expo-error-reporter"]
    },
    "patterns": [
      "handle errors at start",
      "early returns",
      "avoid else",
      "use if-return",
      "implement error boundaries"
    ]
  },

  "testing": {
    "framework": {
      "unit": "Jest",
      "ui": "react-test-renderer",
      "utilities": "custom renderWithoutUnmounting.ts"
    },
    "coverage": {
      "targets": {
        "statements": "70%",
        "branches": "70%",
        "functions": "70%",
        "lines": "70%"
      }
    },
    "whenToTest": [
      "new components must have accompanying snapshot tests",
      "all custom hooks must have unit tests",
      "context providers must have tests for key state changes",
      "utility functions must have comprehensive unit tests",
      "critical user flows must have integration tests",
      "write tests before fixing bugs to prevent regressions"
    ],
    "fileStructure": [
      "place test files in a __tests__ directory adjacent to the tested code",
      "name test files with the pattern [ComponentName].test.tsx",
      "group related tests using nested describe blocks",
      "follow the AAA pattern (Arrange, Act, Assert) within test cases"
    ],
    "snapshotTesting": [
      "use react-test-renderer, not React Native Testing Library",
      "test components with different prop combinations",
      "include descriptive snapshot names (e.g., .toMatchSnapshot('loading state'))",
      "keep snapshots focused and minimal - test specific states rather than entire screens",
      "review snapshot diffs carefully before accepting changes"
    ],
    "mocking": [
      "mock dependencies directly with jest.mock() rather than using complex provider hierarchies",
      "mock hooks at the module level when testing components that use them",
      "create reusable mock factories for complex objects like Game or User",
      "use our custom CSS Interop transformer for styling-related modules",
      "prefer manual React element creation over JSX in complex mocks"
    ],
    "componentTesting": [
      "test all components that maintain internal state",
      "test all components that include conditional rendering",
      "test all components that implement event handlers",
      "test all components that communicate with contexts or hooks",
      "test components in isolation from their dependencies",
      "test all meaningful component states (loading, error, empty, populated)"
    ],
    "contextAndHookTesting": [
      "test custom hooks with our test hook utility",
      "verify context providers correctly maintain and update state",
      "test context selectors independently",
      "ensure hooks cleanup properly when component unmounts"
    ],
    "antiPatterns": [
      "DO NOT mix snapshot tests with behavioral assertions in the same test",
      "DO NOT create unnecessarily large snapshots of entire screens",
      "DO NOT test implementation details, focus on behavior",
      "DO NOT use complex wrapper hierarchies when simple mocks would suffice",
      "DO NOT skip failing tests without documentation"
    ]
  },

  "security": {
    "input": "sanitize for XSS",
    "storage": "react-native-encrypted-storage",
    "communication": ["HTTPS", "proper authentication"],
    "guidelines": "follow Expo security docs"
  },

  "i18n": {
    "libraries": [
      "react-native-i18n",
      "expo-localization"
    ],
    "support": [
      "multiple languages",
      "RTL layouts",
      "text scaling",
      "font adjustments"
    ]
  },

  "keyConventions": [
    "use Expo managed workflow",
    "prioritize Mobile Web Vitals",
    "use expo-constants for env vars",
    "handle permissions with expo-permissions",
    "implement OTA updates with expo-updates",
    "follow Expo deployment practices",
    "ensure iOS/Android compatibility"
  ],

  "documentation": {
    "primary": "https://docs.expo.dev/",
    "sections": [
      "Views",
      "Blueprints",
      "Extensions"
    ]
  }
} 